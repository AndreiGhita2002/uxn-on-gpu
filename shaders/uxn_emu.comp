#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
//
// Created by Andrei Ghita
// Based on the UXN emulator from https://wiki.xxiivv.com/site/uxn.html
//

struct stack {
    uint8_t dat[256];
	uint8_t ptr;
};

layout(std140, binding = 0) buffer UXN_Buffer {
    uint8_t ram[65536];
    stack wst;  // working stack
    stack rst;  // return stack
    uint8_t dev[256];  // todo device data
} uxn;

// layout(std140, binding = 1) buffer ConsoleBuffer {
//     uint8_t buf[256];
//     uint8_t ptr;
// } console;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

/* Devices */
// device in
uint8_t emu_dei(uint32_t addr) {
	return uxn.dev[addr];
}

// device out
void emu_deo(uint32_t addr, uint32_t value) {
    // todo i think value should be uint8 here
	uxn.dev[addr] = uint8_t(value);
	// these are commented because they could very easily overwrite other data
	// especially when value was a uint8 casted into uint32
	// uxn.dev[addr+1] = uint8_t(value << 8)
	// uxn.dev[addr+2] = uint8_t(value << 16)
	// uxn.dev[addr+3] = uint8_t(value << 24)
}

/* Unroll */
#define OPC(opc, init, body) \
	case 0x00|opc: {const int _2=0,_r=0;init body;} break;\
	case 0x20|opc: {const int _2=1,_r=0;init body;} break;\
	case 0x40|opc: {const int _2=0,_r=1;init body;} break;\
	case 0x60|opc: {const int _2=1,_r=1;init body;} break;\
	case 0x80|opc: {const int _2=0,_r=0;uint8_t k=uxn.wst.ptr;init uxn.wst.ptr=k;body;} break;\
	case 0xa0|opc: {const int _2=1,_r=0;uint8_t k=uxn.wst.ptr;init uxn.wst.ptr=k;body;} break;\
	case 0xc0|opc: {const int _2=0,_r=1;uint8_t k=uxn.rst.ptr;init uxn.rst.ptr=k;body;} break;\
	case 0xe0|opc: {const int _2=1,_r=1;uint8_t k=uxn.rst.ptr;init uxn.rst.ptr=k;body;} break;\

/* Microcode */
#define JMI a = uxn.ram[pc] << 8 | uxn.ram[pc + 1], pc += a + 2;
#define REM if(_r != 0) uxn.rst.ptr -= uint8_t(1 + _2); else uxn.wst.ptr -= uint8_t(1 + _2);
#define INC(s) uxn.s.dat[uxn.s.ptr++]
#define DEC(s) uxn.s.dat[--uxn.s.ptr]
#define JMP(i) pc = (_2 != 0) ? i : pc + int8_t(i);
#define PO1(o) o = (_r != 0) ? DEC(rst) : DEC(wst);
#define PO2(o) o = (_r != 0) ? DEC(rst) | DEC(rst) << 8 : DEC(wst) | DEC(wst) << 8;
#define POx(o) { if(_2 != 0) PO2(o) else PO1(o) }
#define PU1(i) { if(_r != 0) INC(rst) = uint8_t(i); else INC(wst) = uint8_t(i); }
#define RP1(i) { if(_r != 0) INC(wst) = uint8_t(i); else INC(rst) = uint8_t(i); }
#define PUx(i) { if(_2 != 0) { c = uint8_t(i); PU1(c >> 8) PU1(c) } else PU1(i) }
#define GET(o) { if(_2 != 0) PO1(o[1]) PO1(o[0]) }
#define PUT(i) { PU1(i[0]) if(_2 != 0) PU1(i[1]) }
#define DEI(i,o) o[0] = uint32_t(emu_dei(i)); if(_2 != 0) o[1] = uint32_t(emu_dei(i+1)); PUT(o)
#define DEO(i,j) emu_deo(i, j[0]); if(_2 != 0) emu_deo(i + 1, j[1]);
#define PEK(i,o,m) o[0] = uxn.ram[i]; if(_2 != 0) o[1] = uxn.ram[(i + 1) & m]; PUT(o)
#define POK(i,j,m) uxn.ram[i] = uint8_t(j[0]); if(_2 != 0) uxn.ram[(i + 1) & m] = uint8_t(j[1]);

int uxn_eval(uint32_t pc) {
    uint32_t a, b, c, x[2], y[2], z[2], step = 524288; //0x80000
	if((pc == 0) || (uxn.dev[0x0f] != 0)) return 0;
	while((step--) != 0) {
		switch(int(uxn.ram[pc++])) {          // !! is this cast good?
		/* BRK */ case 0x00: return 1;
		/* JCI */ case 0x20: if(DEC(wst) != 0) { JMI break; } pc += 2; break;
		/* JMI */ case 0x40: JMI break;
		/* JSI */ case 0x60: c = pc + 2; INC(rst) = uint8_t(c >> 8); INC(rst) = uint8_t(c); JMI break;
		/* LI2 */ case 0xa0: INC(wst) = uxn.ram[pc++]; /* fall-through */
		/* LIT */ case 0x80: INC(wst) = uxn.ram[pc++]; break;
		/* L2r */ case 0xe0: INC(rst) = uxn.ram[pc++]; /* fall-through */
		/* LIr */ case 0xc0: INC(rst) = uxn.ram[pc++]; break;
		/* INC */ OPC(0x01,POx(a),PUx(a + 1))
		/* POP */ OPC(0x02,REM   ,{})
		/* NIP */ OPC(0x03,GET(x) REM   ,PUT(x))
		/* SWP */ OPC(0x04,GET(x) GET(y),PUT(x) PUT(y))
		/* ROT */ OPC(0x05,GET(x) GET(y) GET(z),PUT(y) PUT(x) PUT(z))
		/* DUP */ OPC(0x06,GET(x),PUT(x) PUT(x))
		/* OVR */ OPC(0x07,GET(x) GET(y),PUT(y) PUT(x) PUT(y))
		/* EQU */ OPC(0x08,POx(a) POx(b),PU1(b == a))
		/* NEQ */ OPC(0x09,POx(a) POx(b),PU1(b != a))
		/* GTH */ OPC(0x0a,POx(a) POx(b),PU1(b > a))
		/* LTH */ OPC(0x0b,POx(a) POx(b),PU1(b < a))
		/* JMP */ OPC(0x0c,POx(a),JMP(a))
		/* JCN */ OPC(0x0d,POx(a) PO1(b),if(b != 0) JMP(a))
		/* JSR */ OPC(0x0e,POx(a),RP1(pc >> 8) RP1(pc) JMP(a))
		/* STH */ OPC(0x0f,GET(x),RP1(x[0]) if(_2 != 0) RP1(x[1]))
		/* LDZ */ OPC(0x10,PO1(a),PEK(a, x, 0xff))
		/* STZ */ OPC(0x11,PO1(a) GET(y),POK(a, y, 0xff))
		/* LDR */ OPC(0x12,PO1(a),PEK(pc + int8_t(a), x, 0xffff))
		/* STR */ OPC(0x13,PO1(a) GET(y),POK(pc + int8_t(a), y, 0xffff))
		/* LDA */ OPC(0x14,PO2(a),PEK(a, x, 0xffff))
		/* STA */ OPC(0x15,PO2(a) GET(y),POK(a, y, 0xffff))
		/* DEI */ OPC(0x16,PO1(a),DEI(a, x))
		/* DEO */ OPC(0x17,PO1(a) GET(y),DEO(a, y))
		/* ADD */ OPC(0x18,POx(a) POx(b),PUx(b + a))
		/* SUB */ OPC(0x19,POx(a) POx(b),PUx(b - a))
		/* MUL */ OPC(0x1a,POx(a) POx(b),PUx(b * a))
		/* DIV */ OPC(0x1b,POx(a) POx(b),PUx((a!=0) ? b / a : 0))
		/* AND */ OPC(0x1c,POx(a) POx(b),PUx(b & a))
		/* ORA */ OPC(0x1d,POx(a) POx(b),PUx(b | a))
		/* EOR */ OPC(0x1e,POx(a) POx(b),PUx(b ^ a))
		/* SFT */ OPC(0x1f,PO1(a) POx(b),PUx(b >> (a & 0xf) << (a >> 4)))
		          default: break;
		}
	}
}

void main() {
    // this runs an entire uxn program
    uxn_eval(uint8_t(0x0100));
}
