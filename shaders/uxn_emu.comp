#version 450
//
// Created by Andrei Ghita
// Based on the UXN emulator from https://wiki.xxiivv.com/site/uxn.html
//

layout(std140, binding = 0) buffer Shared_UXN_Buffer {
    uint pc;
    uint dev[256];  // device data
    uint flags;
    uint halt;
} shared_uxn;

layout(std140, binding = 1) buffer Private_UXN_Buffer {
    uint ram[65536];
    uint wst[256];  // working stack
    uint pWst;
    uint rst[256];  // return stack
    uint pRst;
} uxn;

layout (local_size_x = 1) in;

/* VM Registry State */
struct State {
    uint a, b, c;
    uvec2 x, y, z;
};

/* Unroll */
#define OPC(opc, init, body) \
	case 0x00|opc: {const int _2=0,_r=0;init body;} break;\
	case 0x20|opc: {const int _2=1,_r=0;init body;} break;\
	case 0x40|opc: {const int _2=0,_r=1;init body;} break;\
	case 0x60|opc: {const int _2=1,_r=1;init body;} break;\
	case 0x80|opc: {const int _2=0,_r=0;uint k=uxn.pWst;init uxn.pWst=k;body;} break;\
	case 0xa0|opc: {const int _2=1,_r=0;uint k=uxn.pWst;init uxn.pWst=k;body;} break;\
	case 0xc0|opc: {const int _2=0,_r=1;uint k=uxn.pRst;init uxn.pRst=k;body;} break;\
	case 0xe0|opc: {const int _2=1,_r=1;uint k=uxn.pRst;init uxn.pRst=k;body;} break;\

/* Microcode */
void push_wst(uint i) { uxn.wst[uxn.pWst] = i; uxn.pWst++; }

void push_rst(uint i) { uxn.rst[uxn.pRst] = i; uxn.pRst++; }

uint pop_wst() { uxn.pWst--; return uxn.wst[uxn.pWst]; }

uint pop_rst() { uxn.pRst--; return uxn.rst[uxn.pRst]; }

void PUr(uint i, int _r) {
    if(_r != 0) {
        push_wst(i);
    } else {
        push_rst(i);
    }
}

uint PO1(int _r) {
    return (_r != 0) ? pop_rst() : pop_wst();
}

uint PO2(int _r) {
    return (_r != 0) ? pop_rst() | pop_rst() << 8 : pop_wst() | pop_wst() << 8;
}

uint POx(int _r, int _2) {
    return (_2 != 0) ? PO2(_r) : PO1(_r);
}

void PU1(uint i, int _r) {
    if(_r != 0) {
        push_rst(i);
    } else {
        push_wst(i);
    }
}

void PUx(inout State s, uint i, int _r, int _2) {
    if (_2 != 0) {
        s.c = i;
        PU1(s.c >> 8, _r);
        PU1(s.c, _r);
    } else {
        PU1(i, _r);
    }
}

void PUT(uvec2 i, int _r, int _2) {
    PU1(i.x, _r);
    if (_2 != 0) {
        PU1(i.y, _r);
    }
}

void POK(uint i, uvec2 j, uint m, int _r, int _2) {
    uxn.ram[i] = j.x;
    if(_2 != 0) {
        uxn.ram[(i + 1) & m] = j.y;
    }
}

void PEK(inout uvec2 o, uint i, uint m, int _r, int _2) {
    o.x = uxn.ram[i];
    if (_2 != 0) {
        o.y = uxn.ram[(i + 1) & m];
    }
    PUT(o,_r,_2);
}

void GET(inout uvec2 v, int _r, int _2) {
    if(_2 != 0) {
        v.y = PO1(_r);
        v.x = PO1(_r);
    } else {
        v.x = PO1(_r);
    }
}

void JMI(inout State s) {
    s.a = ((uxn.ram[shared_uxn.pc] & 0xff) << 8) | (uxn.ram[shared_uxn.pc + 1] & 0xff);
    shared_uxn.pc += 2 + s.a; // 2 comes from the size of the jumpto label
    shared_uxn.pc = shared_uxn.pc % 0x10000; // ensure 16bit overflow behaviour
}

void JMP(uint i, int _2) {
    if (_2 == 0) {
        // byte mode
        shared_uxn.pc += (i & 0x7f) - (i & 0x80);
    } else {
        // short mode
        shared_uxn.pc = i & 0xffff;
    }
}

void REM(int _r, int _2) {
    if(_r != 0) {
        uxn.pRst -= 1 + _2;
    } else {
        uxn.pWst -= 1 + _2;
    }
}

/* Devices */
// Flags
#define DEO_FLAG         0x001
#define DEO_CONSOLE_FLAG 0x002
#define DEO_CERROR_FLAG  0x004
#define DEI_CONSOLE_FLAG 0x010
#define DRAW_PIXEL_FLAG  0x100
#define DRAW_SPRITE_FLAG 0x200

// input from device
uvec2 DEI(uint addr, uvec2 o, int _r, int _2) {

    if (addr == 0x12) shared_uxn.flags = DEI_CONSOLE_FLAG;

    o.x = shared_uxn.dev[addr];
    if (_2 != 0) {
        o.y = shared_uxn.dev[addr + 1];
    }
    PUT(o,_r,_2);
    return o;
}

// output to device
uint DEO(uint addr, uvec2 v, int _2) {

    // cannot resize screen
    if (addr == 0x22) return 0;
    if (addr == 0x24) return 0;

    shared_uxn.flags |= DEO_FLAG;
    if (addr == 0x2e) shared_uxn.flags |= DRAW_PIXEL_FLAG;
    if (addr == 0x2f) shared_uxn.flags |= DRAW_SPRITE_FLAG;
    if (addr == 0x18) shared_uxn.flags |= DEO_CONSOLE_FLAG;
    if (addr == 0x19) shared_uxn.flags |= DEO_CERROR_FLAG;

    // no need to halt in a lot of cases, i.e. when writting to Screen/X
    uint halt = 2 + _2; // halt code for DEO/DEO2

    //todo there might be more ports that can be optimised like this
    if (addr == 0x22 || addr == 0x24 || addr == 0x28 || addr == 0x2a || addr == 0x2c) {
        halt = 0; // no need to halt
    }

    shared_uxn.dev[addr] = v.x;
    if (_2 != 0) {
        shared_uxn.dev[addr + 1] = v.y;
        return halt; // halt code for DEO2
    }
    return halt; // halt code for DEO
}

uint uxn_eval(State state) {
    // check for shutdown
	if((shared_uxn.pc == 0) || (shared_uxn.dev[0x0f] != 0)) return 5;
	// select instruction
	switch(uxn.ram[shared_uxn.pc++] & 0xff) {
    /* BRK */ case 0x00: return 1;
    /* JCI */ case 0x20:
                if(uxn.wst[--uxn.pWst] != 0) { JMI(state); }
                else { shared_uxn.pc += 2; }
                break;
    /* JMI */ case 0x40: JMI(state); break;
    /* JSI */ case 0x60:
                state.c = shared_uxn.pc + 2;
                push_rst((state.c >> 8) & 0xff);
                push_rst(state.c & 0xff);
                JMI(state); break;
    /* LI2 */ case 0xa0: push_wst(uxn.ram[shared_uxn.pc++]); /* fall-through */
    /* LIT */ case 0x80: push_wst(uxn.ram[shared_uxn.pc++]); break;
    /* L2r */ case 0xe0: push_rst(uxn.ram[shared_uxn.pc++]); /* fall-through */
    /* LIr */ case 0xc0: push_rst(uxn.ram[shared_uxn.pc++]); break;
    /* INC */ OPC(0x01, state.a = POx(_r, _2);, PUx(state, state.a + 1, _r, _2);)
    /* POP */ OPC(0x02, REM(_r, _2);, {})
    /* NIP */ OPC(0x03,
                  GET(state.x, _r, _2); REM(_r, _2); ,
                  PUT(state.x, _r, _2); )
    /* SWP */ OPC(0x04,
                  GET(state.x, _r, _2); GET(state.y, _r, _2); ,
                  PUT(state.x, _r, _2); PUT(state.y, _r, _2); )
    /* ROT */ OPC(0x05,
                  GET(state.x,_r,_2);
                  GET(state.y,_r,_2);
                  GET(state.z,_r,_2); ,
                  PUT(state.y,_r,_2);
                  PUT(state.x,_r,_2);
                  PUT(state.z,_r,_2); )
    /* DUP */ OPC(0x06,
                  GET(state.x,_r,_2); ,
                  PUT(state.x,_r,_2);
                  PUT(state.x,_r,_2); )
    /* OVR */ OPC(0x07,
                  GET(state.x,_r,_2); GET(state.y,_r,_2); ,
                  PUT(state.y,_r,_2); PUT(state.x,_r,_2); PUT(state.y,_r,_2); )
    /* EQU */ OPC(0x08,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  if (state.b == state.a) { PU1(1,_r); }
                  else { PU1(0,_r); })
    /* NEQ */ OPC(0x09,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  if (state.b != state.a) { PU1(1,_r); }
                  else { PU1(0,_r); })
    /* GTH */ OPC(0x0a,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  if (state.b > state.a) { PU1(1,_r); }
                  else { PU1(0,_r); })
    /* LTH */ OPC(0x0b,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  if (state.b < state.a) { PU1(1,_r); }
                  else { PU1(0,_r); })
    /* JMP */ OPC(0x0c,
                  state.a = POx(_r,_2); ,
                  JMP(state.a, _2); )
    /* JCN */ OPC(0x0d,
                  state.a = POx(_r,_2); state.b = PO1(_r); ,
                  if(state.b != 0) { JMP(state.a, _2); })
    /* JSR */ OPC(0x0e,
                  state.a = POx(_r,_2); ,
                  PUr(shared_uxn.pc >> 8,_r); PUr(shared_uxn.pc,_r); JMP(state.a, _2); )
    /* STH */ OPC(0x0f,
                  GET(state.x,_r,_2); ,
                  PUr(state.x.x,_r);
                  if(_2 != 0) { PUr(state.x.y,_r); })
    /* LDZ */ OPC(0x10,
                  state.a = PO1(_r); ,
                  PEK(state.x, state.a, 0xff, _r, _2); )
    /* STZ */ OPC(0x11,
                  state.a = PO1(_r); GET(state.y,_r,_2); ,
                  POK(state.a, state.y, 0xff, _r, _2); )
    /* LDR */ OPC(0x12,
                  state.a = PO1(_r); ,
                  PEK(state.x, shared_uxn.pc + state.a, 0xffff, _r,_2); )
    /* STR */ OPC(0x13,
                  state.a = PO1(_r); GET(state.y,_r,_2); ,
                  POK(shared_uxn.pc + state.a, state.y, 0xffff, _r,_2); )
    /* LDA */ OPC(0x14,
                  state.a = PO2(_r); ,
                  PEK(state.x, state.a, 0xffff, _r,_2); )
    /* STA */ OPC(0x15,
                  state.a = PO2(_r); GET(state.y,_r,_2); ,
                  POK(state.a, state.y, 0xffff, _r,_2); )
    /* DEI */ OPC(0x16,
                  state.a = PO1(_r); ,
                  state.x = DEI(state.a, state.x, _r,_2); )
    /* DEO */ OPC(0x17,
                  state.a = PO1(_r); GET(state.y,_r,_2); ,
                  return DEO(state.a, state.y, _2); ) // DEO: halt code 2 | DEO2: halt code 3
    /* ADD */ OPC(0x18,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  PUx(state, state.b + state.a, _r,_2); )
    /* SUB */ OPC(0x19,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  PUx(state, state.b - state.a, _r,_2); )
    /* MUL */ OPC(0x1a,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  PUx(state, state.b * state.a, _r,_2); )
    /* DIV */ OPC(0x1b,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  if (state.a == 0) { PUx(state, 0, _r,_2); }
                  else { PUx(state, state.b / state.a, _r,_2); } )
    /* AND */ OPC(0x1c,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  PUx(state, state.a & state.b, _r,_2); )
    /* ORA */ OPC(0x1d,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  PUx(state, state.a | state.b, _r,_2); )
    /* EOR */ OPC(0x1e,
                  state.a = POx(_r,_2); state.b = POx(_r,_2); ,
                  PUx(state, state.a ^ state.b, _r,_2); )
    /* SFT */ OPC(0x1f,
                  state.a = PO1(_r); state.b = POx(_r,_2); ,
                  PUx(state, state.b >> (state.a & 0xf) << (state.a >> 4), _r,_2); )
              default: return 4; // Crash
	}
	return 0; // Continue execution
}

void main() {
    State state = {0, 0, 0, uvec2(0,0), uvec2(0,0), uvec2(0,0)};
    shared_uxn.flags = 0;
    shared_uxn.halt = 0;

    // Run the next Uxn instruction
    // possible halt codes:
    // 0 - halt not needed; continue evaluation
    // 1 - BRK encountered
    // 2 - DEO halt
    // 3 - DEO2 halt
    // 4 - opcode not recognised
    // 5 - shutdown
    while (shared_uxn.halt == 0) {
        shared_uxn.halt = uxn_eval(state);
    }
    shared_uxn.dev[0] = uxn.ram[shared_uxn.pc-1];

    // Test memory offsets and strides with this:
    // uxn.ram[0] = 1;
    // uxn.ram[65535] = 1;
    // uxn.wst[0] = 1;
    // uxn.wst[255] = 1;
    // uxn.rst[0] = 1;
    // uxn.rst[255] = 0xffffffff;
    // shared_uxn.dev[0] = 0xffffffff;
    // shared_uxn.dev[255] = 0xffffffff;
}
