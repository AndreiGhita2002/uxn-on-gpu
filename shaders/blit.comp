#version 450

layout(std140, set = 0, binding = 0) buffer Shared_UXN_Buffer {
    uint pc;
    uint dev[256];  // device data
    uint flags;
} shared_uxn;

layout(std140, set = 0, binding = 1) buffer Private_UXN_Buffer {
    uint ram[65536];
    uint wst[256];  // working stack
    uint pWst;
    uint rst[256];  // return stack
    uint pRst;
} uxn;

layout(set = 1, binding = 2, rgba8) uniform image2D background;
layout(set = 1, binding = 3, rgba8) uniform image2D foreground;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// System Device Addresses
#define SYS_R 0x08
#define SYS_G 0x0a
#define SYS_B 0x0c
// Screen Device Addresses
#define SCREEN_VEC      0x20
#define SCREEN_WIDTH    0x22
#define SCREEN_HEIGHT   0x24
#define SCREEN_AUTO     0x26
#define SCREEN_X        0x28
#define SCREEN_Y        0x2a
#define SCREEN_ADDR     0x2c
#define SCREEN_PIXEL    0x2e
#define SCREEN_SPRITE   0x2f
// Flags
#define DRAW_PIXEL_FLAG  0x100
#define DRAW_SPRITE_FLAG 0x200
// Pixel Modes
#define PIXEL_BACKGROUND_MASK 0x00
#define PIXEL_FOREGROUND_MASK 0x40

uint get_byte(uint addr) {
    return shared_uxn.dev[addr];
}

uint get_short(uint addr) {
    return (shared_uxn.dev[addr] << 8) | shared_uxn.dev[addr + 1];
}

void to_short(uint v, uint addr) {
    shared_uxn.dev[addr]   = (v >> 8) & 0xff;
    shared_uxn.dev[addr+1] =  v       & 0xff;
}

bool mask(uint x, uint mask) {
    return (x & mask) == mask;
}

vec4 get_colour(uint colour_i) {
    if (colour_i < 4) {
        uint shift = (3 - colour_i) * 4;
        uint r = (get_short(SYS_R) >> shift) & 0xF;
        uint g = (get_short(SYS_G) >> shift) & 0xF;
        uint b = (get_short(SYS_B) >> shift) & 0xF;
        uvec3 sys_colours = uvec3(r, g, b);
        return vec4(sys_colours.xyz / 16.0, 1.0);
    }
    return vec4(1.0, 0.0, 0.0, 1.0);
}

uint get_2bpp_colour_i(uint sprite_low, uint value) {
    if (value > 3) return -1;

    uint base_colour = (sprite_low >> 2) & 0x3;
    uint mix_colour = sprite_low & 0x3;

    if (value == 0 && (sprite_low == 0x5 || sprite_low == 0xA || sprite_low == 0xF)) {
        return 4; // "none"
    }

    switch (value) {
        case 0: return base_colour;
        case 1: return mix_colour;
        case 2: return (mix_colour == 0) ? ((base_colour + 1) % 4) : ((mix_colour + 1) % 4);
        case 3: return (mix_colour == 0) ? ((base_colour + 2) % 4) : ((mix_colour + 2) % 4);
    }
    return 4;
}

vec4 colour_2bpp(uint sprite_low, uvec2 offset, ivec2 auto_xy, int auto_i) {
    // ---------------------- 2 bpp --------------------------------
    uint addr = get_short(SCREEN_ADDR) + offset.y * 2;// + (auto_xy.y * auto_i * 2);
    uint row = uxn.ram[addr];
    uint draw_colour = (row >> (offset.x * 2)) & 0x3; // for 2 bpp
    uint colour_i = get_2bpp_colour_i(sprite_low, draw_colour);

    if (colour_i > 3) { return vec4(0, 0, 0, 0); }

    return get_colour(colour_i);
}

vec4 colour_1bpp(uint sprite_low, uvec2 offset, ivec2 auto_xy, int auto_i) {
    // ---------------------- 1 bpp --------------------------------
    uint addr = get_short(SCREEN_ADDR) + offset.y;// + (auto_xy.y * auto_i);
    uint row = uxn.ram[addr];
    uint draw_colour = (row >> offset.x) & 0x1; // for 1 bpp

    // select colour
    if (draw_colour != 0 && sprite_low == 0x0) {
        return vec4(0, 0, 0, 0); // 'none'
    } else if (draw_colour == 0 && (sprite_low == 0x0 || sprite_low == 0x5 || sprite_low == 0xa || sprite_low == 0xf)) {
        return vec4(0, 0, 0, 0); // 'clear' or 'none'
    }
    // Extract bits [3:2] for 1 or bits [1:0] for 0
    uint colour = (sprite_low >> (2 * (1 - draw_colour))) & 0x3;
    return get_colour(colour);
}

void main() {
    uvec2 offset = uvec2(gl_GlobalInvocationID);
    // pixel requested
    if (mask(shared_uxn.flags, DRAW_PIXEL_FLAG) && (offset == uvec2(0, 0))) {
        // ---------------------- pixel --------------------------------
        // coordinates
        uint x = get_short(SCREEN_X);
        uint y = get_short(SCREEN_Y);
        ivec2 coords = ivec2(x, y);

        // colour
        uint pixel = get_byte(SCREEN_PIXEL);
        vec4 colour = get_colour(pixel & 0x0f);

        // editing the image
        if (pixel / 0x10 == 0x0) {
            imageStore(background, coords, colour);
        }
        if (pixel / 0x10 == 0x4) {
            imageStore(foreground, coords, colour);
        }
    }
    // sprite requested
    if (mask(shared_uxn.flags, DRAW_SPRITE_FLAG)) {
        uint sprite = get_byte(SCREEN_SPRITE);
        uint sprite_low = sprite & 0xf;
        vec4 v_colour;

        // flipped, modes and layer
        bool mode_is_2bpp = ((sprite >> 11) & 1) != 0;
        bool layer_is_foreground = ((sprite >> 10) & 1) != 0;

        // coordinates
        uint x = get_short(SCREEN_X);
        uint y = get_short(SCREEN_Y);
        bool y_flipped = ((sprite >> 9) & 1) == 1;
        bool x_flipped = ((sprite >> 8) & 1) == 1;
        ivec2 coords;

        coords.x = int(x + (x_flipped ? offset.x : (7 - offset.x)));
        coords.y = int(y + (y_flipped ? (7 - offset.y) : offset.y));

        // auto
        uint auto_byte = get_byte(SCREEN_AUTO);
        uint auto_length = ((auto_byte & 0xf0) / 0x10) + 1;
        ivec2 auto_xy = ivec2(auto_byte & 1, (auto_byte >> 1) & 1);
        auto_xy.x = x_flipped ? (-auto_xy.x) : auto_xy.x;
        auto_xy.y = y_flipped ? (-auto_xy.y) : auto_xy.y;
        //if auto addr bit is set, then the addr needs to be incremented like the coords
        bool auto_addr = ((auto_byte >> 2) & 1) != 0;

        shared_uxn.flags = auto_xy.x * 1000 + auto_xy.y * 100;

        // drawing
        for (int i = 0; i < auto_length; i ++) {
            ivec2 o = (i * 8) * auto_xy.yx;

            // choosing the bpp mode
            vec4 v_colour = mode_is_2bpp ? colour_2bpp(sprite_low, offset, auto_xy, auto_addr ? i : 0)
                                         : colour_1bpp(sprite_low, offset, auto_xy, auto_addr ? i : 0);

            if(v_colour == vec4(0, 0, 0, 0)) { continue; }

            if (layer_is_foreground) {
                imageStore(foreground, coords + o, v_colour);
            } else {
                imageStore(background, coords + o, v_colour);
            }
        }

        // incrementing the ports
        memoryBarrier();
        barrier();
        if (gl_LocalInvocationIndex == 0) {
            to_short(x + auto_xy.x * 8, SCREEN_X);
            to_short(y + auto_xy.y * 8, SCREEN_Y);
            //todo increment the addr too
        }
    }
}
